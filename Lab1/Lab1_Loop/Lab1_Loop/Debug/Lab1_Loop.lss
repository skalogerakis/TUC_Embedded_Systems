
Lab1_Loop.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f9  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ee  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fd  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  00001211  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <loopCounter>:

#include <avr/io.h>

void loopCounter(){
	//Initialize port for the LED
	DDRB = 0b00000001;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;
  70:	18 ba       	out	0x18, r1	; 24
		http://web.csulb.edu/~hill/ee346/Lectures/06%20AVR%20Looping.pdf
	*/
	while(1){
		for(uint32_t i= 0; i< 166666; i++){
			if(i == 166666-1){
				PORTB ^= 1 << PINB0;
  72:	21 e0       	ldi	r18, 0x01	; 1
 * Authors : Stefanos Kalogerakis, Aris Zervakis
 */ 

#include <avr/io.h>

void loopCounter(){
  74:	89 e0       	ldi	r24, 0x09	; 9
  76:	9b e8       	ldi	r25, 0x8B	; 139
  78:	a2 e0       	ldi	r26, 0x02	; 2
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	04 c0       	rjmp	.+8      	; 0x86 <loopCounter+0x1a>
		http://web.csulb.edu/~hill/ee346/Lectures/06%20AVR%20Looping.pdf
	*/
	while(1){
		for(uint32_t i= 0; i< 166666; i++){
			if(i == 166666-1){
				PORTB ^= 1 << PINB0;
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	82 27       	eor	r24, r18
  82:	88 bb       	out	0x18, r24	; 24
  84:	f7 cf       	rjmp	.-18     	; 0x74 <loopCounter+0x8>
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	a1 09       	sbc	r26, r1
  8a:	b1 09       	sbc	r27, r1
		So we lose 2 cycles in each loop but it is translated in some ìs of time.
		http://web.csulb.edu/~hill/ee346/Lectures/06%20AVR%20Looping.pdf
	*/
	while(1){
		for(uint32_t i= 0; i< 166666; i++){
			if(i == 166666-1){
  8c:	e1 f7       	brne	.-8      	; 0x86 <loopCounter+0x1a>
  8e:	f7 cf       	rjmp	.-18     	; 0x7e <loopCounter+0x12>

00000090 <main>:

int main(void)
{
    //The following code will produce a blinking led every second in the same output.
	
	loopCounter();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <loopCounter>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
